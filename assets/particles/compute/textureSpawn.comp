#version 450
#define M_PI 3.1415926535897932384626433832795
#define M_TAU (M_PI * 2)
#define MAX_PARTICLES 5000

layout (local_size_x = 256) in;

#pragma include("includes/particle.glsl")

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

uniform int u_rngBaseSeed = 1;
int rngSeed;
int fastrand() {
    rngSeed = (214013 * rngSeed + 2531011);
    return (rngSeed >> 16) & 0x7FFF;
}

const float factor = 1.0 / 1024.0;
float f_fastrand() {
    int r = fastrand();
    return mod(r, 1024) * factor;
}

// 128MB+

//
//layout(std430, binding = 1) buffer DeadPool {
//    uint LastIdx;
//    int[] DeadIndices;
//};

uniform float gTime;
uniform float iTime;
uniform int u_workload = 360;
uniform int u_startId = 0;
uniform vec2 u_spawnPoint;
uniform vec2 attractionPoint;

uniform sampler2D u_sampleColour;
uniform sampler2D u_sampleMask;
uniform int u_sampleChannel;

uniform vec2 u_sampleSize;

void main() {

    uint invocationIdx = gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                        gl_GlobalInvocationID.y * gl_WorkGroupSize.x +
                        gl_GlobalInvocationID.x;

    int id = abs(int(invocationIdx)) * u_workload;
    id += u_startId;

    int x = int(mod(invocationIdx, u_sampleSize.x));
    int y = int(round(invocationIdx / u_sampleSize.x));

    vec2 worldCoords = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 texCoords = worldCoords / u_sampleSize;
//    vec2 texCoords = vec2(x, y) / u_sampleSize;
//    vec2 texCoords = (gl_GlobalInvocationID / gl_NumWorkGroups).xy;
//    vec2 worldCoords = texCoords * u_sampleSize;

    int particleId = -1;
    particleId = id ;
    ParticleData datum = Data[particleId];

    vec2 direction = normalize(attractionPoint - u_spawnPoint);

    vec2 point = u_spawnPoint - (u_sampleSize * 0.5);

    datum.Position = point + worldCoords;
    datum.Velocity = direction;
    datum.Colour = texture(u_sampleColour, texCoords);
//    datum.Colour = vec4(texCoords, 0.0, 1.0);
    datum.Life = 10f * texture(u_sampleMask, texCoords)[u_sampleChannel];
    datum.Life = 10f;
    datum.Type = 0;
    datum.Scale = vec2(1.0);

    Data[particleId] = datum;
}
