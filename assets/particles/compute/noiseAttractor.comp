#version 450
#define M_PI 3.1415926535897932384626433832795
#define M_TAU (M_PI * 2)
#define MAX_PARTICLES 100000

layout (local_size_x = 1) in;

#pragma include("includes/particle.glsl")
#pragma include("includes/colourCurve.glsl")

//// 16KB
//layout(std430, binding = 1) buffer DeadPool {
//    uint LastIdx;
//    int[] DeadIndices;
//};

uniform float gTime;
uniform int u_workload = 360;
uniform float u_delta;
uniform vec2 attractionPoint;

#pragma include("includes/noise.glsl")

void main() {
    uint invocationIdx = gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                        gl_GlobalInvocationID.y * gl_WorkGroupSize.x +
                        gl_GlobalInvocationID.x;

    int id = abs(int(invocationIdx)) * u_workload;

    int particleId = -1;
    for(int i = 0; i < u_workload; i++) {
        particleId = id + i;
        ParticleData datum = Data[particleId];
        if(datum.Life <= 0f)
            continue;

        datum.Life -= u_delta;

        vec2 direction = GetDirection(datum.Position, u_noiseScale);
        datum.Velocity += direction;

        vec2 dir = attractionPoint - datum.Position;
        float dst = distance(attractionPoint, datum.Position);
        dir = normalize(dir);
        float m = 1.0 / (dst * dst);
        m *= 100;
        m = clamp(m, 10, 100);
        dir *= m;
        datum.Velocity += dir;

        datum.Colour = Sample(u_curve, 10.0 - datum.Life);

        // update particles
        datum.Position += datum.Velocity * u_delta;

//        if(datum.Life <= 0f) {
//            uint idx = LastIdx++;
//            DeadIndices[int(round(mod(idx, DeadIndices.length())))] = particleId;
//        }

        Data[particleId] = datum;
    }
}
