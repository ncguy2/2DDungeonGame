#version 450
#define M_PI 3.1415926535897932384626433832795
#define M_TAU (M_PI * 2)
#define MAX_PARTICLES 100000

layout (local_size_x = 1) in;

struct ParticleData {
    vec2 Position;
    float Life;
    uint Type;
    vec4 Colour;
    vec2 Velocity;
    vec2 Scale;
};

// 128MB+
layout(std430, binding = 0) buffer Particles {
    ParticleData Data[];
};

//// 16KB
//layout(std430, binding = 1) buffer DeadPool {
//    uint LastIdx;
//    int[] DeadIndices;
//};

uniform int u_workload = 360;
uniform float u_delta;

void main() {
    uint invocationIdx = gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                        gl_GlobalInvocationID.y * gl_WorkGroupSize.x +
                        gl_GlobalInvocationID.x;

    int id = abs(int(invocationIdx)) * u_workload;

    int particleId = -1;
    for(int i = 0; i < u_workload; i++) {
        particleId = id + i;
        ParticleData datum = Data[particleId];
        if(datum.Life <= 0f)
            continue;

        datum.Life -= u_delta;

        // TODO update particles
        datum.Position += datum.Velocity;

//        if(datum.Life <= 0f) {
//            uint idx = LastIdx++;
//            DeadIndices[int(round(mod(idx, DeadIndices.length())))] = particleId;
//        }

        Data[particleId] = datum;
    }
}
