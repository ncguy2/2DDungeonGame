#version 450
#define M_PI 3.1415926535897932384626433832795
#define M_TAU (M_PI * 2)
#define MAX_PARTICLES 100000

layout (local_size_x = 1) in;

struct ParticleData {
    vec2 Position;
    float Life;
    uint Type;
    vec4 Colour;
    vec2 Velocity;
    vec2 Scale;
};

// 128MB+
layout(std430, binding = 0) buffer Particles {
    ParticleData Data[];
};

//// 16KB
//layout(std430, binding = 1) buffer DeadPool {
//    uint LastIdx;
//    int[] DeadIndices;
//};

uniform float gTime;
uniform int u_workload = 360;
uniform float u_noiseScale = .001;
uniform float u_delta;

mat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}
float tri(in float x){return abs(fract(x)-.5);}
vec2 tri2(in vec2 p){return vec2(tri(p.x+tri(p.y*2.)),tri(p.y+tri(p.x*2.)));}
mat2 m2 = mat2( 0.970,  0.242, -0.242,  0.970 );

float triangleNoise(in vec2 p)
{
    float z=1.5;
    float z2=1.5;
	float rz = 0.;
    vec2 bp = p;
	for (float i=0.; i<=3.; i++ )
	{
        vec2 dg = tri2(bp*2.)*.8;
        dg *= mm2(gTime*.3);
        p += dg/z2;

        bp *= 1.6;
        z2 *= .6;
		z *= 1.8;
		p *= 1.2;
        p*= m2;

        rz+= (tri(p.x+tri(p.y)))/z;
	}
	return rz;
}

float GetAngle(in vec2 p, in float scale) {
    float alpha = triangleNoise(p * vec2(scale));
    return alpha = radians(alpha * 360.0);
}

vec2 GetDirection(in vec2 p, in float scale) {
    float angle = GetAngle(p, scale);
    vec2 q = vec2(cos(angle), sin(angle)) * 2.0 - 1.0;
    return q;
}

void main() {
    uint invocationIdx = gl_GlobalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
                        gl_GlobalInvocationID.y * gl_WorkGroupSize.x +
                        gl_GlobalInvocationID.x;

    int id = abs(int(invocationIdx)) * u_workload;

    int particleId = -1;
    for(int i = 0; i < u_workload; i++) {
        particleId = id + i;
        ParticleData datum = Data[particleId];
        if(datum.Life <= 0f)
            continue;

        datum.Life -= u_delta;

        vec2 direction = GetDirection(datum.Position, u_noiseScale);
        datum.Velocity += direction;

        // TODO update particles
        datum.Position += datum.Velocity * u_delta;


//        if(datum.Life <= 0f) {
//            uint idx = LastIdx++;
//            DeadIndices[int(round(mod(idx, DeadIndices.length())))] = particleId;
//        }

        Data[particleId] = datum;
    }
}
